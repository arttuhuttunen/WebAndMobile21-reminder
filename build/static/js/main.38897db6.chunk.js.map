{"version":3,"sources":["App.js","index.js"],"names":["Reminder","props","Date","reminder","timestamp","toLocaleString","name","onClick","event","deleteReminder","id","Form","onSubmit","addReminder","value","state","newName","onChange","handleNameChange","type","newTimestamp","handleDateTimeChange","App","setState","target","window","confirm","axios","delete","then","response","reminders","filter","preventDefault","map","includes","alert","post","concat","data","get","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"wMAGMA,EAAW,SAACC,GACd,OACI,8BACI,mCAAM,IAAIC,KAAKD,EAAME,SAASC,WAAWC,iBAAzC,IAA4DJ,EAAME,SAASG,KAA3E,IAAiF,wBAAQC,QAAS,SAAAC,GAAK,OAAIP,EAAMQ,eAAeD,EAAOP,EAAME,SAASO,GAAIT,EAAME,SAASG,OAAxF,oBAAjF,UAKNK,EAAO,SAACV,GACV,OACI,gCACI,8CACA,uBAAMW,SAAUX,EAAMY,YAAtB,UACI,yCACU,uBAAOC,MAAOb,EAAMc,MAAMC,QAASC,SAAUhB,EAAMiB,sBAE7D,yCACU,uBAAOC,KAAK,iBAAiBL,MAAOb,EAAMc,MAAMK,aAAcH,SAAUhB,EAAMoB,0BAExF,8BACI,wBAAQF,KAAK,SAAb,0BA0ELG,E,kDAlEb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAgBRiB,iBAAmB,SAACV,GAClB,EAAKe,SAAS,CAACP,QAASR,EAAMgB,OAAOV,SAlBpB,EAqBnBO,qBAAuB,SAACb,GACtB,EAAKe,SAAS,CAACH,aAAcZ,EAAMgB,OAAOV,SAtBzB,EAyBnBL,eAAiB,SAACD,EAAOE,EAAIJ,GACvBmB,OAAOC,QAAQ,6CAA+CpB,IAClEqB,IACKC,OAAO,kBAAoBlB,GAC3BmB,MAAK,SAAAC,GACF,EAAKP,SAAS,CAACQ,UAAW,EAAKhB,MAAMgB,UAAUC,QAAO,SAAA7B,GAAQ,OAAIA,EAASO,KAAOA,WA9BzE,EAkCnBG,YAAc,SAACL,GAEb,GADAA,EAAMyB,iBACD,EAAKlB,MAAMgB,UAAUG,KAAI,SAAA/B,GAAQ,OAAIA,EAASG,QAAM6B,SAAS,EAAKpB,MAAMC,SAezEoB,MAAM,aAAe,EAAKrB,MAAMC,QAAU,yBAfyC,CACnF,IAAMb,EAAW,CACbG,KAAM,EAAKS,MAAMC,QACjBZ,UAAW,EAAKW,MAAMK,cAE1BO,IACKU,KAAK,iBAAkBlC,GACvB0B,MAAK,SAAAC,GACF,EAAKP,SAAS,CACVQ,UAAW,EAAKhB,MAAMgB,UAAUO,OAAOR,EAASS,MAChDvB,QAAS,GACTI,aAAc,UA7C9B,EAAKL,MAAQ,CACXgB,UAAW,GACXf,QAAS,GACTI,aAAc,IALC,E,qDASnB,WAAqB,IAAD,OAClBO,IACKa,IAAI,kBACJX,MAAK,SAAAC,GACF,EAAKP,SAAS,CAACQ,UAAWD,EAASS,Y,oBA0C7C,WAAU,IAAD,OACP,OACE,gCACE,cAAC,EAAD,CAAM1B,YAAa4B,KAAK5B,YAAaE,MAAO0B,KAAK1B,MAAOG,iBAAkBuB,KAAKvB,iBAAkBG,qBAAsBoB,KAAKpB,uBAC5H,4CACCoB,KAAK1B,MAAMgB,UAAUG,KAAI,SAAA/B,GAAQ,OAAI,cAAC,EAAD,CAAUA,SAAUA,EAA8BM,eAAgB,EAAKA,gBAApCN,EAASG,gB,GA7DxEoC,IAAMC,WC1BxBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.38897db6.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Reminder = (props) => {\r\n    return (\r\n        <div>\r\n            <li> {new Date(props.reminder.timestamp).toLocaleString()} {props.reminder.name} <button onClick={event => props.deleteReminder(event, props.reminder.id, props.reminder.name)}>Delete</button> </li> \r\n        </div>\r\n    )\r\n}\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Add Reminder</h2>\r\n            <form onSubmit={props.addReminder}>\r\n                <div>\r\n                    Name: <input value={props.state.newName} onChange={props.handleNameChange}/>\r\n                </div>\r\n                <div>\r\n                    Date: <input type=\"datetime-local\" value={props.state.newTimestamp} onChange={props.handleDateTimeChange}/>\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">Add</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      reminders: [],\r\n      newName: '',\r\n      newTimestamp: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n        .get('/api/reminders')\r\n        .then(response => {\r\n            this.setState({reminders: response.data})\r\n        })\r\n  }\r\n\r\n  handleNameChange = (event) => {\r\n    this.setState({newName: event.target.value})\r\n  }\r\n\r\n  handleDateTimeChange = (event) => {\r\n    this.setState({newTimestamp: event.target.value})\r\n  }\r\n\r\n  deleteReminder = (event, id, name) => {\r\n    if (window.confirm(\"Are you sure you want to remove reminder: \" + name))\r\n    axios\r\n        .delete('/api/reminders/' + id)\r\n        .then(response => {\r\n            this.setState({reminders: this.state.reminders.filter(reminder => reminder.id !== id)})\r\n        })\r\n  }\r\n\r\n  addReminder = (event) => {\r\n    event.preventDefault()\r\n    if (!this.state.reminders.map(reminder => reminder.name).includes(this.state.newName)) {\r\n        const reminder = {\r\n            name: this.state.newName,\r\n            timestamp: this.state.newTimestamp\r\n        }\r\n        axios\r\n            .post('/api/reminders', reminder)\r\n            .then(response => {\r\n                this.setState({\r\n                    reminders: this.state.reminders.concat(response.data),\r\n                    newName: '',\r\n                    newTimestamp: ''\r\n                })\r\n            })\r\n    } else {\r\n        alert(\"Reminder '\" + this.state.newName + \"' already exists.\")\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form addReminder={this.addReminder} state={this.state} handleNameChange={this.handleNameChange} handleDateTimeChange={this.handleDateTimeChange}/>\r\n        <h2>Reminders:</h2>\r\n        {this.state.reminders.map(reminder => <Reminder reminder={reminder} key={reminder.name} deleteReminder={this.deleteReminder}/>)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}